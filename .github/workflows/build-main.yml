name: Build Main Brachn

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ENABLE_DEPENDENCIES_SCAN: false
      ENABLE_SONAR_SCAN: true
      ENABLE_SONAR_CHECK_SCAN: true
      ENABLE_DOCKER_BUILD_AND_PUSH_IMAGE: true
      ENABLE_DEPLOY: false
      ENABLE_WAIT_DEPLOY: false
      ENABLE_CHECK_DEPLOY: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        if: ${{env.ENABLE_DEPENDENCIES_SCAN=='true'}}
        run: mvn clean verify -DskipTests -Pcve

      #      - name: Unit Tests
      #        run: mvn test -Put
      #
      #      - name: Integration Tests
      #        run: mvn test -Pit

      - name: Tests
        run: mvn test -Put -Pit


      - name: "Quality gate"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B clean verify sonar:sonar -Dsonar.projectKey=seenibu_todos

      - name: "Check Quality Gate"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY=seenibu_todos
          ANALYSIS_STATUS_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY"
          
          echo "Waiting for Quality Gate result..."
          sleep 5
          
          STATUS=$(curl -s -u $SONAR_TOKEN: "$ANALYSIS_STATUS_URL" | jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi

      - name: Package
        run: mvn -B package  -DskipTests=true

      - name: "Read and increment version"
        id: versioning
        run: |
          VERSION=$(cat version.txt)
          echo "Current version: $VERSION"
          
          # Split version: major.minor
          IFS='.' read -r MAJOR MINOR <<< "$VERSION"
          
          if [ "$MINOR" -lt 99 ]; then
          NEW_MINOR=$((MINOR + 1))
          NEW_MAJOR=$MAJOR
          else
          NEW_MINOR=0
          NEW_MAJOR=$((MAJOR + 1))
          fi
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR"
          
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > version.txt
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: "Dockerized"
        if: ${{env.ENABLE_DOCKER_BUILD_AND_PUSH_IMAGE=='true'}}
        run: |
          docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }}  -t ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{steps.versioning.outputs.VERSION}} -t  ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .
#         docker push ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }}
#         docker push ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{steps.versioning.outputs.VERSION}}
#         docker push ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .
          for tag in ${{ github.sha }} ${{steps.versioning.outputs.VERSION}} latest; do docker push ${{secrets.DOCKER_NAMESPACE}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:$tag; done

      - name: "Deploy"
        env:
          MY_ENV_VAR: value
        run: |
          echo "Step will be ready soon .. "

      - name: "Wait for deploy to finish"
        if: ${{env.ENABLE_WAIT_DEPLOY=='true'}}
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'

      - name: "Test Deploy"
        if: ${{env.ENABLE_CHECK_DEPLOY=='true'}}
        env:
          MY_ENV_VAR: value
        run: |
          echo "Step will be ready soon .. "